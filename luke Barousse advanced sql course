https://www.lukebarousse.com/products/sql-for-data-analytics/

-- Create company_dim table with primary key
CREATE TABLE public.company_dim
(
    company_id INT PRIMARY KEY,
    name TEXT,
    link TEXT,
    link_google TEXT,
    thumbnail TEXT
);

-- Create skills_dim table with primary key
CREATE TABLE public.skills_dim
(
    skill_id INT PRIMARY KEY,
    skills TEXT,
    type TEXT
);

-- Create job_postings_fact table with primary key
CREATE TABLE public.job_postings_fact
(
    job_id INT PRIMARY KEY,
    company_id INT,
    job_title_short VARCHAR(255),
    job_title TEXT,
    job_location TEXT,
    job_via TEXT,
    job_schedule_type TEXT,
    job_work_from_home BOOLEAN,
    search_location TEXT,
    job_posted_date TIMESTAMP,
    job_no_degree_mention BOOLEAN,
    job_health_insurance BOOLEAN,
    job_country TEXT,
    salary_rate TEXT,
    salary_year_avg NUMERIC,
    salary_hour_avg NUMERIC,
    FOREIGN KEY (company_id) REFERENCES public.company_dim (company_id)
);

-- Create skills_job_dim table with a composite primary key and foreign keys
CREATE TABLE public.skills_job_dim
(
    job_id INT,
    skill_id INT,
    PRIMARY KEY (job_id, skill_id),
    FOREIGN KEY (job_id) REFERENCES public.job_postings_fact (job_id),
    FOREIGN KEY (skill_id) REFERENCES public.skills_dim (skill_id)
);

-- Set ownership of the tables to the postgres user
ALTER TABLE public.company_dim OWNER to postgres;
ALTER TABLE public.skills_dim OWNER to postgres;
ALTER TABLE public.job_postings_fact OWNER to postgres;
ALTER TABLE public.skills_job_dim OWNER to postgres;

-- Create indexes on foreign key columns for better performance
CREATE INDEX idx_company_id ON public.job_postings_fact (company_id);
CREATE INDEX idx_skill_id ON public.skills_job_dim (skill_id);
CREATE INDEX idx_job_id ON public.skills_job_dim (job_id);
---------------------------------------------------------------------------------------
--CASE Statements

-- This query selects the fields `job_id` and `salary_year_avg` from the `job_postings_fact` table
-- and calculates two additional fields `experience_level` and `remote_option` based on specific conditions.
SELECT
    job_id,
    salary_year_avg,
    CASE
        WHEN jp.job_title ILIKE '%Senior%' THEN 'Senior'
         WHEN jp.job_title ILIKE '%Manager%' OR jp.job_title ILIKE '%Lead%' THEN 'Lead/Manager'
        WHEN jp.job_title ILIKE '%Junior%' OR jp.job_title ILIKE '%Entry%' THEN 'Junior/Entry'
        ELSE 'Not Specified'
    END AS experience_level,
    CASE
        WHEN jp.job_work_from_home THEN 'Remote'
        ELSE 'No'
    END AS remote_option
FROM job_postings_fact jp
WHERE 
  salary_year_avg IS NOT NULL 
ORDER BY 
  job_id;




-- SUBQUERIES
-- Selección de las habilidades más mencionadas y su conteo
SELECT
    sd.skills,
    sub.skill_count
FROM
    (
        -- Subconsulta para contar y ordenar habilidades por frecuencia
        SELECT
            skill_id,
            COUNT(*) AS skill_count
        FROM
            skills_job_dim
        GROUP BY
            skill_id
        ORDER BY
            skill_count DESC
        LIMIT 5
    ) AS sub
    JOIN skills_dim sd ON sub.skill_id = sd.skill_id
ORDER BY
    sub.skill_count DESC;

Consulta con CTE
-- Selección de las habilidades más mencionadas y su conteo utilizando CTE
WITH
    skill_count AS (
        -- CTE para calcular el total de menciones por habilidad
        SELECT
            skill_id,
            COUNT(skill_id) AS skill_total
        FROM
            skills_job_dim
        GROUP BY
            skill_id
    )
SELECT
    skills_dim.skills AS skill_name,
    skill_count.skill_total
FROM
    skills_dim
INNER JOIN
    skill_count ON skill_count.skill_id = skills_dim.skill_id
ORDER BY
    skill_total DESC
LIMIT 5;

-- This query utilizes a subquery to count the total number of job postings per company,
-- and categorizes the job posting size as 'Small', 'Medium', or 'Large' based on the total.

SELECT
    cd.name,
    CASE
        WHEN sub.total < 10 THEN 'Small'
        WHEN sub.total >= 10 AND sub.total <= 50 THEN 'Medium'
        WHEN sub.total > 50 THEN 'Large'
        ELSE 'Unknown'  -- Por si acaso hay algún caso inesperado
    END AS job_posting_size
FROM 
    (
        SELECT
        jp.company_id,
        COUNT(*) AS total
    FROM
        job_postings_fact jp
    JOIN 
        company_dim cd ON jp.company_id = cd.company_id
    Group by
    	jp.company_id
    ORDER BY
    	total DESC
    ) AS sub
JOIN 
    company_dim cd ON sub.company_id = cd.company_id;  

-- This query selects companies with an average salary higher than the overall average salary.
-- It uses a HAVING clause to filter results after grouping them by company.

SELECT
    jp.company_id,
    cd.name AS company_name,
    AVG(jp.salary_year_avg) AS average_salary
FROM
    job_postings_fact jp
JOIN
    company_dim cd ON jp.company_id = cd.company_id
WHERE
    jp.salary_year_avg IS NOT NULL
GROUP BY
    jp.company_id, cd.name
HAVING
    AVG(jp.salary_year_avg) > (
        SELECT 
            AVG(jp.salary_year_avg)
        FROM
            job_postings_fact jp
        WHERE
            jp.salary_year_avg IS NOT NULL
    )
ORDER BY
    average_salary DESC;
    
-- This query selects companies with an average salary higher than the overall average salary.
-- It uses a subquery in the JOIN to calculate the average salary per company, and an additional subquery in the WHERE clause to compare it with the overall average salary.

SELECT 
    company_dim.name
FROM 
    company_dim
INNER JOIN (
    -- Subquery to calculate average salary per company
    SELECT 
			company_id, 
			AVG(salary_year_avg) AS avg_salary
    FROM job_postings_fact
    GROUP BY company_id
    ) AS company_salaries ON company_dim.company_id = company_salaries.company_id
-- Filter for companies with an average salary greater than the overall average
WHERE company_salaries.avg_salary > (
    -- Subquery to calculate the overall average salary
    SELECT AVG(salary_year_avg)
    FROM job_postings_fact
)
ORDER BY
    company_salaries.avg_salary DESC;

CTEs

-- This query calculates the number of unique job titles per company and then selects the company names 
-- along with their respective count of unique job titles.
-- It uses a Common Table Expression (CTE) to count the distinct job titles for each company,
-- and then joins this result with the company_dim table to get the company names and their unique job title counts.
WITH title_diversity AS
    (
    SELECT
        jp.company_id,
        COUNT(DISTINCT jp.job_title) AS unique_titles  
    FROM
        job_postings_fact jp
    GROUP BY
        jp.company_id
    )
SELECT
    cd.name,
    td.unique_titles
FROM    
    company_dim cd
INNER JOIN
    title_diversity td ON cd.company_id = td.company_id
ORDER BY
    td.unique_titles DESC;

 
-- Get the average annual salary per country, rounded to 2 decimal places
WITH country_salaries AS (
    SELECT
        jp.job_country,
        ROUND(AVG(jp.salary_year_avg), 2) AS country_salary_year
    FROM
        job_postings_fact jp
    WHERE
        jp.salary_year_avg IS NOT NULL
    GROUP BY
        jp.job_country
),

-- Get job details including job title, company name, and annual salary
title_salary AS (
    SELECT
        jp.job_id,
        jp.job_title,
        cd.name AS company_name,
        jp.salary_year_avg,
        jp.job_posted_date,
        jp.job_country
    FROM
        job_postings_fact jp
    INNER JOIN
        company_dim cd ON jp.company_id = cd.company_id
    WHERE
        jp.salary_year_avg IS NOT NULL
)

-- Select job ID, job title, company name, annual salary,
-- categorize the salary as 'Above Average' or 'Below Average' compared to the country's average,
-- and extract the month from the job posted date
SELECT
    ts.job_id,
    ts.job_title,
    ts.company_name,
    ts.salary_year_avg AS salary_rate,
    CASE
        WHEN ts.salary_year_avg > cs.country_salary_year THEN 'Above Average'
        ELSE 'Below Average'
    END AS salary_category,
    EXTRACT(MONTH FROM ts.job_posted_date) AS posting_month
FROM
    title_salary ts
INNER JOIN
    country_salaries cs ON ts.job_country = cs.job_country
ORDER BY
    posting_month DESC
;

-- This query aims to quantify the unique skills required per company and identify
-- which companies offer the highest average salary for positions necessitating at least one skill.
-- The final output ensures inclusion of companies without skill-related job postings by using LEFT JOINs.

WITH
    skill_count AS (
        SELECT
            jp.company_id,
            COUNT(DISTINCT sj.skill_id) AS count_skill
        FROM
            company_dim cd
            LEFT JOIN job_postings_fact jp ON jp.company_id = cd.company_id
            LEFT JOIN skills_job_dim sj ON sj.job_id = jp.job_id
        GROUP BY
            jp.company_id
    ),
    max_salary AS (
        SELECT
            jp.company_id,
            MAX(jp.salary_year_avg) AS highest_average_salary
        FROM
            job_postings_fact jp
        WHERE
            jp.job_id IN (
                SELECT
                    job_id
                FROM
                    skills_job_dim
            )
        GROUP BY
            jp.company_id
    )
SELECT
    cd.name,
    sc.count_skill, -- handle companies without any skills required
    ms.highest_average_salary
FROM
    company_dim cd
    LEFT JOIN skill_count sc ON cd.company_id = sc.company_id
    LEFT JOIN max_salary ms ON cd.company_id = ms.company_id
ORDER BY
    cd.name
;

