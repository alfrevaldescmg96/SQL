https://www.lukebarousse.com/products/sql-for-data-analytics/

-- Create company_dim table with primary key
CREATE TABLE public.company_dim
(
    company_id INT PRIMARY KEY,
    name TEXT,
    link TEXT,
    link_google TEXT,
    thumbnail TEXT
);

-- Create skills_dim table with primary key
CREATE TABLE public.skills_dim
(
    skill_id INT PRIMARY KEY,
    skills TEXT,
    type TEXT
);

-- Create job_postings_fact table with primary key
CREATE TABLE public.job_postings_fact
(
    job_id INT PRIMARY KEY,
    company_id INT,
    job_title_short VARCHAR(255),
    job_title TEXT,
    job_location TEXT,
    job_via TEXT,
    job_schedule_type TEXT,
    job_work_from_home BOOLEAN,
    search_location TEXT,
    job_posted_date TIMESTAMP,
    job_no_degree_mention BOOLEAN,
    job_health_insurance BOOLEAN,
    job_country TEXT,
    salary_rate TEXT,
    salary_year_avg NUMERIC,
    salary_hour_avg NUMERIC,
    FOREIGN KEY (company_id) REFERENCES public.company_dim (company_id)
);

-- Create skills_job_dim table with a composite primary key and foreign keys
CREATE TABLE public.skills_job_dim
(
    job_id INT,
    skill_id INT,
    PRIMARY KEY (job_id, skill_id),
    FOREIGN KEY (job_id) REFERENCES public.job_postings_fact (job_id),
    FOREIGN KEY (skill_id) REFERENCES public.skills_dim (skill_id)
);

-- Set ownership of the tables to the postgres user
ALTER TABLE public.company_dim OWNER to postgres;
ALTER TABLE public.skills_dim OWNER to postgres;
ALTER TABLE public.job_postings_fact OWNER to postgres;
ALTER TABLE public.skills_job_dim OWNER to postgres;

-- Create indexes on foreign key columns for better performance
CREATE INDEX idx_company_id ON public.job_postings_fact (company_id);
CREATE INDEX idx_skill_id ON public.skills_job_dim (skill_id);
CREATE INDEX idx_job_id ON public.skills_job_dim (job_id);
---------------------------------------------------------------------------------------
--CASE Statements

-- This query selects the fields `job_id` and `salary_year_avg` from the `job_postings_fact` table
-- and calculates two additional fields `experience_level` and `remote_option` based on specific conditions.
SELECT
    job_id,
    salary_year_avg,
    CASE
        WHEN jp.job_title ILIKE '%Senior%' THEN 'Senior'
         WHEN jp.job_title ILIKE '%Manager%' OR jp.job_title ILIKE '%Lead%' THEN 'Lead/Manager'
        WHEN jp.job_title ILIKE '%Junior%' OR jp.job_title ILIKE '%Entry%' THEN 'Junior/Entry'
        ELSE 'Not Specified'
    END AS experience_level,
    CASE
        WHEN jp.job_work_from_home THEN 'Remote'
        ELSE 'No'
    END AS remote_option
FROM job_postings_fact jp
WHERE 
  salary_year_avg IS NOT NULL 
ORDER BY 
  job_id;




-- SUBQUERIES
-- Selecci칩n de las habilidades m치s mencionadas y su conteo
SELECT
    sd.skills,
    sub.skill_count
FROM
    (
        -- Subconsulta para contar y ordenar habilidades por frecuencia
        SELECT
            skill_id,
            COUNT(*) AS skill_count
        FROM
            skills_job_dim
        GROUP BY
            skill_id
        ORDER BY
            skill_count DESC
        LIMIT 5
    ) AS sub
    JOIN skills_dim sd ON sub.skill_id = sd.skill_id
ORDER BY
    sub.skill_count DESC;

Consulta con CTE
-- Selecci칩n de las habilidades m치s mencionadas y su conteo utilizando CTE
WITH
    skill_count AS (
        -- CTE para calcular el total de menciones por habilidad
        SELECT
            skill_id,
            COUNT(skill_id) AS skill_total
        FROM
            skills_job_dim
        GROUP BY
            skill_id
    )
SELECT
    skills_dim.skills AS skill_name,
    skill_count.skill_total
FROM
    skills_dim
INNER JOIN
    skill_count ON skill_count.skill_id = skills_dim.skill_id
ORDER BY
    skill_total DESC
LIMIT 5;




