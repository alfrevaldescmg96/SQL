CREATE TABLE reviewers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL
);
 
CREATE TABLE series (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(100),
    released_year YEAR,
    genre VARCHAR(100)
);
 
CREATE TABLE reviews (
    id INT PRIMARY KEY AUTO_INCREMENT,
    rating DECIMAL(2 , 1 ),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY (series_id)
        REFERENCES series (id),
    FOREIGN KEY (reviewer_id)
        REFERENCES reviewers (id)
);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');
    
    INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
    
    INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);


-- Query 1: Retrieve the title of the series and its review rating, ordered by rating descending.
SELECT
    series.title, -- Series title
    reviews.rating -- Review rating
FROM 
    series
JOIN
    reviews ON series.id = reviews.series_id
ORDER BY
    rating DESC; -- Order by descending rating

-- Query 2: Retrieve the title of the series and its average rating, rounded to 2 decimals, ordered by average rating descending.
SELECT
    series.title, -- Series title
    ROUND(AVG(reviews.rating), 2) AS avg_rating -- Rounded average rating
FROM 
    series
JOIN
    reviews ON series.id = reviews.series_id
GROUP BY
    series.title -- Group by series title
ORDER BY
    avg_rating DESC; -- Order by descending average rating

-- Query 3: Retrieve the first name, last name of the reviewer along with their review rating.
SELECT
    reviewers.first_name, -- Reviewer first name
    reviewers.last_name, -- Reviewer last name
    reviews.rating -- Review rating
FROM
    reviewers
JOIN	
    reviews ON reviewers.id = reviews.reviewer_id;

-- Query 4: Retrieve the title of the series and its review rating for series that have no ratings.
SELECT
    series.title, -- Series title
    reviews.rating -- Review rating
FROM 
    series
LEFT JOIN
    reviews ON series.id = reviews.series_id
WHERE
    rating IS NULL; -- Filter by null rating

-- Query 5: Retrieve the genre of the series and its average rating.
SELECT
    series.genre, -- Series genre
    AVG(reviews.rating) AS avg_rating -- Average rating
FROM 
    series
JOIN
    reviews ON series.id = reviews.series_id
GROUP BY
    series.genre; -- Group by series genre

-- Query 6: Retrieve the first name, last name of the reviewer along with statistics of their reviews (count, min, max, average) and their status (active or inactive).
SELECT
    rw.first_name, -- Reviewer first name
    rw.last_name, -- Reviewer last name
    IFNULL(COUNT(r.rating), 0) AS COUNT, -- Rating count
    IFNULL(MIN(r.rating), 0) AS MIN, -- Minimum rating
    IFNULL(MAX(r.rating), 0) AS MAX, -- Maximum rating
    IFNULL(AVG(r.rating), 0) AS AVG, -- Average rating
    CASE 
        WHEN r.rating > 0 THEN 'ACTIVE' -- Active status if rating is greater than zero
        ELSE 'INACTIVE' -- Inactive status otherwise
    END AS Status -- Reviewer status
FROM reviewers rw
LEFT JOIN
    reviews r ON rw.id = r.reviewer_id
GROUP BY
    rw.first_name,
    rw.last_name,
    Status; -- Group by reviewer first name, last name, and status

-- Query 7: Retrieve the title of the series, review rating, and full name of the reviewer, ordered by rating descending.
SELECT
    s.title, -- Series title
    r.rating, -- Review rating
    CONCAT(rw.first_name, ' ', rw.last_name) AS reviewer -- Reviewer full name
FROM series s
JOIN
    reviews r ON s.id = r.series_id
JOIN reviewers rw
    ON rw.id = r.reviewer_id
ORDER BY
    r.rating DESC; -- Order by descending review rating
